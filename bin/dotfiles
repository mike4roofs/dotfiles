#!/usr/bin/env bash

echo 'Dotfiles - "endorama" Edoardo Tenani - http://about.me/edoardo.tenani'

if [[ "$1" == "-h" || "$1" == "--help" ]]; then cat <<HELP

Usage: $(basename "$0")

See the README for documentation.
https://github.com/endorama/dotfiles

Copyright (c) 2013 "endorama" Edoardo Tenani
Licensed under the MIT license.
http://endorama.mit-license.org/
HELP
  exit
fi

if [[ "$1" == "install" ]]; then
  echo "Welcome! You are going to install endorama/dotfiles."
  echo "Download is starting..."

  if [[ ! -d ~/.dotfiles ]]; then
    git clone --recursive git://github.com/endorama/dotfiles.git ~/.dotfiles
  else
    echo "A ~/.dotfiles folder already exists, aborting."
  fi

  exit
fi


################################################################################
# Set vars.
# source $(dirname $(dirname $0))/libs/dotfiles/vars.sh
source $HOME/.dotfiles/libs/dotfiles/vars.sh

# Enough with the functions, let's do stuff.

################################################################################
# Initialize.

if [[ ! -d ~/.dotfiles ]]; then
  new_dotfiles_install=1

  # ~/.dotfiles doesn't exist? Clone it!
  echo "Dotfiles not found. Downloading..."

  git clone --recursive git://github.com/endorama/dotfiles.git ~/.dotfiles

  cd ~/.dotfiles
else
  # Make sure we have the latest files.
  echo "Dotfiles found. Updating..."
  cd ~/.dotfiles

  git pull
  git submodule update --init --recursive --quiet
fi

source $dot_lib/doers.sh
source $dot_libs/shared/logging.sh
source $dot_lib/misc.sh

################################################################################
# Test for prerequisites
source $dot_lib/test_for.sh

test_for_var '$dot_folder' $dot_folder
test_for_var '$dot_files' $dot_files
test_for_var '$dot_libs' $dot_libs
test_for_var '$dot_lib' $dot_lib
test_for_var '$dot_cache' $dot_cache

test_for_command 'gcc'

function git_installer() {
  sudo apt-get -qq install git-core
  return $?
}
test_for_command 'git'

################################################################################
# Update existing sudo time stamp if set, otherwise do nothing.
e_header "Update sudo timestamp"
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
e_ok

################################################################################
# Utilities, helpers.
e_header "Source helpers"
source $dot_files/source/10_misc.sh
e_ok

################################################################################
# Add binaries into the path
e_header "Add bin to PATH"

PATH=$dot_folder/bin:$PATH
export PATH

e_ok

################################################################################
# Tweak file globbing.
e_header "Tweak file globbing"

shopt -s dotglob
shopt -s nullglob

e_ok

################################################################################
# Create caches directory, if it doesn't already exist.
source $dot_lib/cache.sh

create_cache_folder

################################################################################
# If backups are needed, this is where they'll go.
e_header "Preparing backup"

date=$(date "+%Y_%m_%d-%H_%M_%S")
backup_dir="$dot_folder/backups/$date/"
backup=

e_ok

################################################################################
# Execute code for each file in these subdirectories.
e_header "Executing actions..."

do_stuff "init"
do_stuff "copy"
do_stuff "link"
do_stuff "zshplugins"
do_stuff "closure"

################################################################################
# Alert if backups were made.
if [[ "$backup" ]]; then
  echo ""
  e_success "Backups were moved to ~/${backup_dir#$HOME/}"
fi

################################################################################
# Least I forget to do a few additional things...
if [[ "$new_dotfiles_install" && -e "$dot_folder/conf/first_time.sh" ]]; then
  e_header "First-Time Reminders"
  source "$dot_folder/conf/first_time.sh"
fi

################################################################################
# All done!
e_header "All done!"
